senha mysql: 1234
senha sql server: sa curitiba

/* Modelagem Básica 
ENTIDADE	= TABELA
CAMPOS 		= ATRIBUTOS 
*/

/*
CLIENTE
NOME 	- CARACTER (30)
CPF		- NUMÉRICO(11)
EMAIL	- CARACTER (30)
TELEFONE- CARACTER(30)
ENDERECO- CARACTER (100)
SEXO	- CARACTER (1)
*/

/* PROCESSOS DE MODELAGEM*/
/* FASE 01 E 02 - ADM DE DADOS */

/*
MODELAGEM CONCEITUAL - RASCUNHO
MODELAGEM LÓGICA - PROGRAMA DE MODELAGEM
*/

/* FASE 03 -DBA / AD  */

/*
MODELAGEM FÍSICA - SCRIPTS DE BANCO
*/

/*CRIANDO BANCO DE DADOS */

CREATE DATABASE PROJETO;

/* CONECTANDO-SE AO BANCO DE DADOS */

USE PROJETO;

/* CRIANDO TABELA */
/*	CHAR QUANDO SABEMOS QUE O TAMANHO SERÁ SEMPRE O MESMO
	VARCHAR QUANDO TEMOS INCERTEZA
	
	FLOAT(10, 2) 10 CASAS TOTAIS E 2 DEPOIS DA VÍRGULA
	*/
CREATE TABLE CLIENTE(
	NOME VARCHAR(30),
	SEXO CHAR(1),
	EMAIL VARCHAR(30),
	CPF INT(11),
	TELEFONE VARCHAR(30),
	ENDERECO VARCHAR(100)	
);

/* VERFICANDO TABELAS */
SHOW TABLES;

/* VERIFICANDO A ESTRUTURA DE UMA TABELA */
DESC CLENTE;

USE PROJETO

SHOW TABLES;

DESC CLIENTE;

/* FORMA 01 - OMITINDO AS COLUNAS */

INSERT INTO CLIENTE VALUES('JOAO', 'M', 'JOAO@HOTMAIL.COM', 123456789, '22923110', 'MAIA LACERDA, ESTACIO - RIO DE JANEIRO - RJ');

INSERT INTO CLIENTE VALUES('SILVANA', 'M', 'SILVANA@HOTMAIL.COM', 123656789,
	'22423110', 'MAIA LACERDA, ESTACIO - RIO DE JANEIRO - RJ');

INSERT INTO CLIENTE VALUES('LEONARDO', 'M', NULL, 623456789,
	'22923410', 'MAIA LACERDA, ESTACIO - RIO DE JANEIRO - RJ');

/* FORMA 02 - COLOCANDO AS COLUNAS */

INSERT INTO CLIENTE(NOME, SEXO, ENDERECO, TELEFONE, CPF) VALUES ('LILIAN',
	'F', 'SENADOR SOARES', '23424124', 234231244);

/* INSERT COMPACTO MYSQL */
	
INSERT INTO CLIENTE VALUES('LEONARDO3', 'M', NULL, 623456789,
	'22923410', 'MAIA LACERDA, ESTACIO - RIO DE JANEIRO - RJ'),
	('LEONARDO4', 'M', NULL, 623456789,
	'22923410', 'MAIA LACERDA, ESTACIO - RIO DE JANEIRO - RJ');

/* COMANDO SELECT */

SELECT NOW(); /*DATA*/

SELECT 'FELIPE MAFRA';

SELECT 'BANCO DE DADOS';

SELECT NOME, SEXO, EMAIL FROM CLIENTE;

SELECT NOME, SEXO, EMAIL, ENDERECO FROM CLIENTE;

/*TODAS AS COLUNAS*/
SELECT * FROM CLIENTE;

/* FILTROS */
SELECT NOME, SEXO FROM CLIENTE WHERE SEXO = 'F';

/* CARACTERE CORINGA + RJ, OU SEJA, TERMINA COM RJ*/
SELECT NOME, ENDERECO FROM CLIENTE WHERE ENDERECO LIKE '%RJ';


/* EXERCICIOS */

CREATE DATABASE LIVRARIA;

USE LIVRARIA;

CREATE TABLE LIVRO(
	NOME_LIVRO 			VARCHAR(100),
	NOME_AUTOR 			VARCHAR(100),
	SEXO_AUTOR 			CHAR(1),
	NUMERO_PAGINAS 		INT,
	NOME_EDITORA 		VARCHAR(100),
	VALOR_LIVRO 		FLOAT,	
	ESTADO_EDITORA 		VARCHAR(30),
	ANO_PUBLICACAO 		VARCHAR(30)	
); 

INSERT INTO LIVRO (NOME_LIVRO, NOME_AUTOR, SEXO_AUTOR, NUMERO_PAGINAS, NOME_EDITORA, VALOR_LIVRO, ESTADO_EDITORA, ANO_PUBLICACAO) VALUES
('Cavaleiro Real', 'Ana Claudia', 'F', 465, 'Atlas', 49.9, 'RJ', '2009'),
('SQL para leigos', 'João Nunes', 'M', 450, 'Addison', 98, 'SP', '2018'),
('Receitas Caseiras', 'Celia Tavares', 'F', 210, 'Atlas', 45, 'RJ', '2008'),
('Pessoas Efetivas', 'Eduardo Santos', 'M', 390, 'Beta', 78.99, 'RJ', '2018'),
('Habitos Saudáveis', 'Eduardo Santos', 'M', 630, 'Beta', 150.98, 'RJ', '2019'),
('A Casa Marrom', 'Hermes Macedo', 'M', 250, 'Bubba', 60, 'MG', '2016'),
('Estacio Querido', 'Geraldo Francisco', 'M', 310, 'Insignia', 100, 'ES', '2015'),
('Pra sempre amigas', 'Leda Silva', 'F', 510, 'Insignia', 78.98, 'ES', '2011'),
('Copas Inesqueciveis', 'Marco Alcantara', 'M', 200, 'Larson', 130.98, 'RS', '2018'),
('O poder da mente', 'Clara Mafra', 'F', 120, 'Continental', 56.58, 'SP', '2017');

/* 1 – Trazer todos os dados. */
SELECT * FROM LIVRO;

/* 2 – Trazer o nome do livro e o nome da editora */
SELECT NOME_LIVRO, NOME_EDITORA FROM LIVRO;

/* 3 – Trazer o nome do livro e a UF dos livros publicados por autores do sexo masculino. */
SELECT NOME_LIVRO, ESTADO_EDITORA FROM LIVRO WHERE SEXO_AUTOR = 'M';

/* 4 - Trazer o nome do livro e o número de páginas dos livros publicados por autores do sexo feminino. */
SELECT NOME_LIVRO, NUMERO_PAGINAS FROM LIVRO WHERE SEXO_AUTOR = 'F';

/* 5 – Trazer os valores dos livros das editoras de São Paulo.*/
SELECT * FROM LIVRO FROM LIVRO WHERE ESTADO_EDITORA = 'SP';

/* 6 – Trazer os dados dos autores do sexo masculino que tiveram livros publicados por São Paulo ou Rio de Janeiro (Questão Desafio).*/
SELECT * FROM LIVRO WHERE SEXO_AUTOR = 'M' AND ESTADO_EDITORA = 'SP' OR ESTADO_EDITORA = 'RJ';

/* ALTERAR O TIPO DOS DADOS */
ALTER TABLE LIVRO MODIFY ANO_PUBLICACAO INT;
ALTER TABLE LIVRO MODIFY VALOR_LIVRO FLOAT(10,2);

SELECT * FROM LIVRO WHERE ANO_PUBLICACAO > 2014;

/* MUDANDO O NOME DA COLUNA  
   SINTAXE NOVA: ALTER TABLE LIVRO RENAME COLUMN ESTADO_EDITORA TO UF; */
ALTER TABLE LIVRO CHANGE COLUMN ESTADO_EDITORA UF VARCHAR(30);
ALTER TABLE LIVRO CHANGE COLUMN ANO_PUBLICACAO ANO INT;
ALTER TABLE LIVRO CHANGE COLUMN SEXO_AUTOR SEXO CHAR(1);
ALTER TABLE LIVRO CHANGE COLUMN NUMERO_PAGINAS PAGINAS INT;
ALTER TABLE LIVRO CHANGE COLUMN PAGINAS PAG INT;
ALTER TABLE LIVRO CHANGE COLUMN VALOR_LIVRO VALOR FLOAT(10, 2);

/*-----------------------------------------------------------
COUNT, GROUP BY, PERFORMANCE COM OPERADORES LOGICOS*/

USE PROJETO;
SELECT COUNT(*) AS 'QUANT' FROM CLIENTE;
SELECT SUM(CPF) AS 'SOMA' FROM CLIENTE;

USE LIVRARIA;
SELECT SUM(PAG) AS 'SOMA' FROM LIVRO;

/* OPERADOR GROUP BY */
USE PROJETO;
SELECT SEXO, COUNT(*) FROM CLIENTE GROUP BY SEXO;

SELECT COUNT(NOME) AS 'NOMES COMECANDO COM L' FROM CLIENTE WHERE NOME LIKE'L%';

/* CONTANDO QUANTOS LIVROS FORAM PUBLICADOS EM CADA ESTADO, AGRUPANDO POR UF E 
   COM ORDEM DESCENDENTE */
USE LIVRARIA;
SELECT UF, COUNT(*) AS 'LIVROS POR UF' FROM LIVRO GROUP BY UF 
ORDER BY COUNT(UF) DESC; -- OU ORDER BY 1, COLUNA 1


/* EXERCICIOS */
 USE EXERCICIO; 
 
select count(*), sexo from funcionarios group by sexo;

select count(*), departamento from funcionarios group by departamento;

--  POR PERFORMANCE, FOI FEITO ASSIM
SELECT * FROM FUNCIONARIOS WHERE
( DEPARTAMENTO = 'Lar' AND SEXO = 'Feminino' ) OR
( DEPARTAMENTO = 'Filmes' AND SEXO = 'Feminino' );


SELECT * FROM FUNCIONARIOS 
WHERE SEXO = 'Masculino' OR DEPARTAMENTO = 'Jardim' LIMIT 20;

/* VALORES NULOS */
USE PROJETO;
-- VALORES NULOS
SELECT NOME, SEXO, ENDERECO FROM CLIENTE WHERE EMAIL IS NULL;
-- VALORES NÃO NULOS
SELECT NOME, SEXO, ENDERECO FROM CLIENTE WHERE EMAIL IS NOT NULL;
-- CONTA VALORES NULOS
SELECT COUNT(*) AS 'EMAILS NULOS' FROM CLIENTE WHERE EMAIL IS NULL;

/* UPDATE */
UPDATE CLIENTE SET EMAIL = 'LILIAN@GMAIL.COM' WHERE NOME = 'LILIAN';

/* DELETE */
DELETE FROM CLIENTE WHERE NOME = 'LEONARDO4'; 
INSERT INTO CLIENTE(NOME, SEXO) VALUES ('RICARDA', 'F');


/* PRIMEIRA FORMA NORMAL */

/*

1 - TODO CAMPO VETORIZADO SE TORNAR'A OUTRA TABELA

[AMARELO, AZUL, LARANJA, VERDE] -> CORES
[KA, FIESTA, UNO, CIVIC]-> CARROS

2 - TODO CAMPO MULTIVALORADO SE TORNAR'A OUTRA TABELA.
QUANDO O CAMPO FOR DIVIS'IVEL

3 - TODA TABELA NECESSITA DE PELO MENOS UM CAMPO QUE IDENTIFIQUE
TODO O REGISTRO COMO SENDO UNICO.
ISSO ;E O QUE CHAMAMOS DE CHAVE PRIMARIA OU PRIMARY KEY.


*/

/* CADINALIDADE */

/* QUEM DEFINE A CARDINALIDADE É A REGRA DE NEGOCIOS */

/* PRIMEIRO ALGARISMO - OBRIGATORIEDADE 
0 - NAO OBRIGATORIO
1 - OBRIGATORIO

SEGUNDO ALGARISMO - CARDINALIDADE
1 - MAXIMO DE UM
N - MAIS DE UM
*/

CREATE DATABASE COMERCIO;
USE COMERCIO;

CREATE TABLE CLIENTE(
	IDCLIENTE INT PRIMARY KEY AUTO_INCREMENT,
	NOME VARCHAR(30) NOT NULL,
	SEXO ENUM('M', 'F') NOT NULL, 
	EMAIL VARCHAR(50) UNIQUE, 
	CPF VARCHAR(15) UNIQUE
);

DROP TABLE CLIENTE;

CREATE TABLE TELEFONE(
	IDTELEFONE INT PRIMARY KEY AUTO_INCREMENT,
	NUMERO VARCHAR(15) NOT NULL,
	TIPO ENUM('RES', 'COM', 'CEL') NOT NULL,
	ID_CLIENTE INT, 
	FOREIGN KEY(ID_CLIENTE)
	REFERENCES CLIENTE(IDCLIENTE)
);

CREATE TABLE ENDERECO(
	IDENDERECO INT PRIMARY KEY AUTO_INCREMENT,
	RUA VARCHAR(30) NOT NULL,
	BAIRRO VARCHAR(30) NOT NULL,
	CIDADE VARCHAR(30) NOT NULL,
	ESTADO CHAR(2) NOT NULL,
	ID_CLIENTE INT UNIQUE,
	FOREIGN KEY(ID_CLIENTE) 
	REFERENCES CLIENTE(IDCLIENTE) 
);



/* ENDERECO - OBRIGATORIO 
CADASTRO DE SOMENTE UM.

TELEFONE - NAO OBRIGATORIO
CADASTRO DE MAIS DE UM (OPCIONAL) /*

/*
CHAVE ESTRANGEIRA É A CHAVE PRIMARIA DE UMA TABELA
QUE VAI ATÉ A OUTRA TABELA PARA FAZER REFERENCIA ENTRE
REGISTROS */

/* EM RELACIONAMENTO 1 X 1 A CHAVE ESTRANGEIRA FICA NA TABELA MAIS FRACA */

/* EM RELACIONAMENTO 1 X N A CHAVE ESTRANGEIRA FICARA SEMPRE NA
CARDINALIDADE N */

USE COMERCIO;
INSERT INTO CLIENTE VALUES(NULL,'FLAVIO','M', 'FLAVIO@GMAIL.COM', '88843274634');
INSERT INTO CLIENTE VALUES(NULL,'ENZO','M', 'ENZO@GMAIL.COM', '89843274634');
INSERT INTO CLIENTE VALUES(NULL,'ANA','F', 'ANA@GMAIL.COM', '08843274634');


-- O BANCO DE DADOS CONTROLA A CARDINALIDADE,
-- PORÉM, NÃO CONTROLA A OBRIGATORIEDADE

INSERT INTO ENDERECO VALUES(NULL, 'PIAUI', 'CENTRO', 'CIDADE', 'PR', 1);
INSERT INTO ENDERECO VALUES(NULL, 'PAULO GOES', 'FLOR', 'GUARULHOS', 'SP', 2);
INSERT INTO ENDERECO VALUES(NULL, 'PAO DE QUEIJO', 'QUEIJO', 'MINAS', 'MG', 3);

INSERT INTO TELEFONE VALUES(NULL, '993420234', 'CEL', 1);
INSERT INTO TELEFONE VALUES(NULL, '993420774', 'RES', 1);
INSERT INTO TELEFONE VALUES(NULL, '893430234', 'COM', 3);
DESC TELEFONE;


-- --------------------------------------------

SELECT NOME, SEXO, EMAIL /* PROJECAO */
FROM CLIENTE /* ORIGEM */
WHERE SEXO = 'F'; /* SELECAO */

SELECT NUMERO /* PROJECAO */
FROM TELEFONE /* ORIGEM */
WHERE TIPO = 'CEL'; /* SELECAO */



/* JUNCAO -> JOIN */
SELECT NOME, EMAIL, IDCLIENTE
FROM CLIENTE;

SELECT ID_CLIENTE, BAIRRO, CIDADE
FROM ENDERECO;

+--------+------------------+-----------+
| NOME   | EMAIL            | IDCLIENTE |
+--------+------------------+-----------+
| FLAVIO | FLAVIO@GMAIL.COM |         1 |
| ENZO   | ENZO@GMAIL.COM   |         2 |
| ANA    | ANA@GMAIL.COM    |         3 |
+--------+------------------+-----------+
+------------+--------+-----------+
| ID_CLIENTE | BAIRRO | CIDADE    |
+------------+--------+-----------+
|          1 | CENTRO | CIDADE    |
|          2 | FLOR   | GUARULHOS |
|          3 | QUEIJO | MINAS     |
+------------+--------+-----------+

-- FUNCIONA MAS É GAMBIARRA
SELECT NOME, SEXO, BAIRRO, CIDADE -- PROJECAO
FROM CLIENTE, ENDERECO -- ORIGEM
WHERE IDCLIENTE = ID_CLIENTE; -- JUNÇÃO

SELECT NOME, SEXO, BAIRRO, CIDADE -- PROJECAO
FROM CLIENTE, ENDERECO -- ORIGEM
WHERE IDCLIENTE = ID_CLIENTE AND SEXO = 'F'; -- JUNÇÃO
-- IDCLIENTE SEMPRE = ID_CLIENTE, PERDA DE DESEMPENHO

-- INNER JOIN -> IDS IGUAIS PARA DENTRO PARA BATER OS IDS, SÓ PEGA OS IGUAIS
SELECT NOME, SEXO, BAIRRO, CIDADE -- PORJEÇÃO
FROM CLIENTE  -- ORIGUEM
	INNER JOIN ENDERECO -- JUNÇÃO
	ON IDCLIENTE = ID_CLIENTE
WHERE SEXO = 'F'; -- SELEÇÃO

-- JUNÇÃO COM 1 X N, LINHAS SE REPETEM
SELECT NOME, SEXO, TIPO, NUMERO
FROM CLIENTE
INNER JOIN TELEFONE
ON IDCLIENTE = ID_CLIENTE;

-- JUNÇÃO 3 TABELAS, COMO ALGUNS N TINHAM NUMERO, SOMEM
SELECT NOME, SEXO, CIDADE, ESTADO, NUMERO, TIPO
FROM CLIENTE
INNER JOIN ENDERECO
ON CLIENTE.IDCLIENTE = ENDERECO.ID_CLIENTE
INNER JOIN TELEFONE
ON CLIENTE.IDCLIENTE = TELEFONE.ID_CLIENTE;

-- PONTEIRAMENTO -> AUMENTO DE PERFORMANCE
SELECT C.NOME, C.SEXO, E.CIDADE, E.ESTADO, T.NUMERO, T.TIPO
FROM CLIENTE C 
INNER JOIN ENDERECO E
ON C.IDCLIENTE = E.ID_CLIENTE
INNER JOIN TELEFONE T
ON C.IDCLIENTE = T.ID_CLIENTE;






/* CATEGORIAS DE BANCO DE DADOS

	DML - DATA MANIPULATION LANGUAGE
		INSERT, SELECT, UPDATE, DELETE

	DDL - DATA DEFINITION LANGUAGE
		DEFINIR O TIPO DE DADO, COMO VARCHAR, FLOAT...

	DCL - DATA CONTROL LANGUAGE
	TCL - TRANSACTION CONTROL LANGUAGE
*/

-- DDL
CREATE TABLE PRODUTO(
	IDPRODUTO INT PRIMARY KEY AUTO_INCREMENT,
	NOME_PRODUTO VARCHAR(30) NOT NULL,
	PRECO FLOAT(10,2),
	FRETE FLOAT(10,2) NOT NULL
);

-- MUDANDO NOME E TIPO - CHANGE
ALTER TABLE PRODUTO
CHANGE PRECO VALOR FLOAT(10,2) NOT NULL;

-- ADD COLUNA
ALTER TABLE PRODUTO
ADD PESO FLOAT(10,2) NOT NULL;

--  DEL COLUNA
ALTER TABLE PRODUTO
DROP COLUMN PESO;

/* EXERCICIOS DML */

INSERT INTO CLIENTE VALUES(NULL,'FLAVIO','M','FLAVIO@IG.COM','4657765');
INSERT INTO CLIENTE VALUES(NULL,'ANDRE','M','ANDRE@GLOBO.COM','7687567');
INSERT INTO CLIENTE VALUES(NULL,'GIOVANA','F',NULL,'0876655');
INSERT INTO CLIENTE VALUES(NULL,'KARLA','M','KARLA@GMAIL.COM','545676778');
INSERT INTO CLIENTE VALUES(NULL,'DANIELE','M','DANIELE@GMAIL.COM','43536789');
INSERT INTO CLIENTE VALUES(NULL,'LORENA','M',NULL,'774557887');
INSERT INTO CLIENTE VALUES(NULL,'EDUARDO','M',NULL,'54376457');
INSERT INTO CLIENTE VALUES(NULL,'ANTONIO','F','ANTONIO@IG.COM','12436767');
INSERT INTO CLIENTE VALUES(NULL,'ANTONIO','M','ANTONIO@UOL.COM','3423565');
INSERT INTO CLIENTE VALUES(NULL,'ELAINE','M','ELAINE@GLOBO.COM','32567763');
INSERT INTO CLIENTE VALUES(NULL,'CARMEM','M','CARMEM@IG.COM','787832213');
INSERT INTO CLIENTE VALUES(NULL,'ADRIANA','F','ADRIANA@GMAIL.COM','88556942');
INSERT INTO CLIENTE VALUES(NULL,'JOICE','F','JOICE@GMAIL.COM','55412256');

INSERT INTO ENDERECO VALUES(NULL,'RUA GUEDES','CASCADURA','B. HORIZONTE','MG',4);
INSERT INTO ENDERECO VALUES(NULL,'RUA MAIA LACERDA','ESTACIO','RIO DE JANEIRO','RJ',5);
INSERT INTO ENDERECO VALUES(NULL,'RUA VISCONDESSA','CENTRO','RIO DE JANEIRO','RJ',6);
INSERT INTO ENDERECO VALUES(NULL,'RUA NELSON MANDELA','COPACABANA','RIO DE JANEIRO','RJ',7);
INSERT INTO ENDERECO VALUES(NULL,'RUA ARAUJO LIMA','CENTRO','VITORIA','ES',8);
INSERT INTO ENDERECO VALUES(NULL,'RUA CASTRO ALVES','LEBLON','RIO DE JANEIRO','RJ',9);
INSERT INTO ENDERECO VALUES(NULL,'AV CAPITAO ANTUNES','CENTRO','CURITIBA','PR',10);
INSERT INTO ENDERECO VALUES(NULL,'AV CARLOS BARROSO','JARDINS','SAO PAULO','SP',11);
INSERT INTO ENDERECO VALUES(NULL,'ALAMEDA SAMPAIO','BOM RETIRO','CURITIBA','PR',12);
INSERT INTO ENDERECO VALUES(NULL,'RUA DA LAPA','LAPA','SAO PAULO','SP',13);
INSERT INTO ENDERECO VALUES(NULL,'RUA GERONIMO','CENTRO','RIO DE JANEIRO','RJ',14);
INSERT INTO ENDERECO VALUES(NULL,'RUA GOMES FREIRE','CENTRO','RIO DE JANEIRO','RJ',15);
INSERT INTO ENDERECO VALUES(NULL,'RUA GOMES FREIRE','CENTRO','RIO DE JANEIRO','RJ',16);

INSERT INTO TELEFONE VALUES(NULL,'68976565','RES',5);
INSERT INTO TELEFONE VALUES(NULL,'99656675','CEL',5);
INSERT INTO TELEFONE VALUES(NULL,'33567765','CEL',6);
INSERT INTO TELEFONE VALUES(NULL,'88668786','CEL',7);
INSERT INTO TELEFONE VALUES(NULL,'55689654','COM',8);
INSERT INTO TELEFONE VALUES(NULL,'88687979','COM',10);
INSERT INTO TELEFONE VALUES(NULL,'88965676','COM',10);
INSERT INTO TELEFONE VALUES(NULL,'89966809','CEL',13);
INSERT INTO TELEFONE VALUES(NULL,'88679978','COM',14);
INSERT INTO TELEFONE VALUES(NULL,'99655768','CEL',14);
INSERT INTO TELEFONE VALUES(NULL,'89955665','RES',14);
INSERT INTO TELEFONE VALUES(NULL,'77455786','RES',15);
INSERT INTO TELEFONE VALUES(NULL,'89766554','RES',16);
INSERT INTO TELEFONE VALUES(NULL,'77755785','RES',8);
INSERT INTO TELEFONE VALUES(NULL,'44522578','COM',16);

/* RELATORIO GERAL DE TODOS OS CLIENTES */

DESC CLIENTE;
DESC ENDERECO;
DESC TELEFONE;

SELECT C.IDCLIENTE, C.NOME, C.SEXO, C.EMAIL, C.CPF, 
	   E.RUA, E.BAIRRO, E.CIDADE, E.ESTADO, 
	   T.TIPO, T.NUMERO
FROM CLIENTE C
INNER JOIN ENDERECO E
ON C.IDCLIENTE = E.ID_CLIENTE
INNER JOIN TELEFONE T
ON C.IDCLIENTE = T.ID_CLIENTE;

/* RELATORIO GERAL DE TODOS OS CLIENTES (TELEFONE E ENDERECO) */
SELECT C.NOME, T.NUMERO, E.RUA, E.BAIRRO, E.CIDADE, E.ESTADO
FROM CLIENTE C
INNER JOIN TELEFONE T
ON C.IDCLIENTE = T.ID_CLIENTE
INNER JOIN ENDERECO E 
ON C.IDCLIENTE = E.ID_CLIENTE;

/* RELATORIO DE MULHERES*/
SELECT * FROM CLIENTE
WHERE IDCLIENTE IN (12,13,18,19);

-- ALTERAR DIVERSAS LINHAS DE UMA VEZ
UPDATE CLIENTE SET SEXO = 'F'
WHERE IDCLIENTE IN (1,2,5,6);

SELECT C.IDCLIENTE, C.NOME, C.SEXO, C.EMAIL, C.CPF, 
	   E.RUA, E.BAIRRO, E.CIDADE, E.ESTADO, 
	   T.TIPO, T.NUMERO
FROM CLIENTE C
INNER JOIN ENDERECO E
ON C.IDCLIENTE = E.ID_CLIENTE
INNER JOIN TELEFONE T
ON C.IDCLIENTE = T.ID_CLIENTE
WHERE SEXO = 'F';

UPDATE CLIENTE SET SEXO = 'M'
WHERE IDCLIENTE IN (1,5);

/* QUANTIDADE DE HOMENS E MULHERES*/
SELECT COUNT(*) AS 'QUANT', SEXO 
FROM CLIENTE
GROUP BY SEXO;

/* TODOS EMAILS DAS MULHERES QUE MORAM NO CENTRO DO RJ E NÃO TEM CELULAR*/
SELECT C.IDCLIENTE, C.EMAIL, C.NOME, C.SEXO, T.TIPO, E.BAIRRO, E.CIDADE
FROM CLIENTE C
INNER JOIN ENDERECO E
ON C.IDCLIENTE = E.ID_CLIENTE
INNER JOIN TELEFONE T
ON C.IDCLIENTE = T.ID_CLIENTE
WHERE SEXO = 'F'
AND BAIRRO = 'CENTRO' AND CIDADE = 'RIO DE JANEIRO'
AND (TIPO = 'RES' OR TIPO = 'COM');
-- ESTÁ ERRADO, POIS UM USUÁRIO PODE TER DOIS TIPOS DE TELEFONE


/* PARA UMA CAMPANHA DE MARKETING, O SETOR SOLICITOU UM
RELATÓRIO COM O NOME, EMAIL E TELEFONE CELULAR 
DOS CLIENTES QUE MORAM NO ESTADO DO RIO DE JANEIRO 
VOCÊ TERÁ QUE PASSAR A QUERY PARA GERAR O RELATORIO PARA
O PROGRAMADOR */
SELECT C.NOME, C.EMAIL, T.NUMERO, T.TIPO, E.ESTADO
FROM CLIENTE C
INNER JOIN TELEFONE T
ON C.IDCLIENTE = T.ID_CLIENTE
INNER JOIN ENDERECO E
ON C.IDCLIENTE = E.ID_CLIENTE
WHERE E.ESTADO = 'RJ' AND (T.TIPO = 'CEL');

/* PARA UMA CAMPANHA DE PRODUTOS DE BELEZA, O COMERCIAL SOLICITOU UM
RELATÓRIO COM O NOME, EMAIL E TELEFONE CELULAR 
 DAS MULHERES QUE MORAM NO ESTADO DE SÃO PAULO 
VOCÊ TERÁ QUE PASSAR A QUERY PARA GERAR O RELATORIO PARA
O PROGRAMADOR */
SELECT C.NOME, C.EMAIL, T.NUMERO, T.TIPO, E.ESTADO
FROM CLIENTE C
INNER JOIN TELEFONE T
ON C.IDCLIENTE = T.ID_CLIENTE
INNER JOIN ENDERECO E
ON C.IDCLIENTE = E.ID_CLIENTE
WHERE C.SEXO = 'F' AND E.ESTADO = 'SP' AND (T.TIPO = 'CEL');

/* FUNÇÃO IFNULL(); */
SELECT 	C.NOME, 
		IFNULL(C.EMAIL, 'SEM EMAIL') AS EMAIL,
		T.NUMERO,
		E.ESTADO
FROM CLIENTE C
INNER JOIN TELEFONE T
ON C.IDCLIENTE = T.ID_CLIENTE
INNER JOIN ENDERECO E
ON C.IDCLIENTE = E.ID_CLIENTE;

/* VIEW -> FUNCIONA COMO UM PONTEIRO DE UMA QUERY*/

CREATE VIEW V_RELATORIO AS 
SELECT 	C.NOME, 
		C.SEXO, 
		IFNULL(C.EMAIL,'-----------') AS EMAIL,
		T.NUMERO, 
		E.BAIRRO, 
		E.CIDADE, 
		E.ESTADO
FROM CLIENTE C
INNER JOIN ENDERECO E
ON C.IDCLIENTE = E.ID_CLIENTE
INNER JOIN TELEFONE T
ON C.IDCLIENTE = T.ID_CLIENTE;

-- PARA USAR A VIEW:
SELECT * FROM RELATORIO;
-- É MOSTRADO EM SHOW TABLES

-- APAGANDO UMA VIEW 
DROP VIEW RELATORIO;

-- INSERT E DELETE EM VIEW, NÃO PODE COM JOIN
-- UPDATE PODE
INSERT INTO V_RELATORIO VALUES('CREUZA', 'F', 'CREUZINHA@fas',
		 '293482487', 'GUARNS', 'ATIM', 'RO'); -- erro




/* ORDER BY */
INSERT INTO PRODUTO VALUES(NULL, 'CALCINHA', 29.39, 7);
INSERT INTO PRODUTO VALUES(NULL, 'CUECA', 33.30, 8);
INSERT INTO PRODUTO VALUES(NULL, 'MEL', 37.39, 1);
INSERT INTO PRODUTO VALUES(NULL, 'SHORTS', 49.90, 10);
INSERT INTO PRODUTO VALUES(NULL, 'AMORA', 69.90, 10);
INSERT INTO PRODUTO VALUES(NULL, 'BOLA', 59.90, 10);

-- ORDENANDO POR NUMEROS
SELECT * FROM PRODUTO
ORDER BY FRETE; -- ASC OU DESC

-- ORDEM ALFABÉTICA
SELECT IDPRODUTO AS ID, NOME_PRODUTO AS PRODUTO, VALOR, FRETE 
FROM PRODUTO
ORDER BY 2; -- COLUNA DOIS, NOME DO PRODUTO

-- ORDENANDO POR MAIS DE UMA COLUNA
SELECT IDPRODUTO AS ID, NOME_PRODUTO AS PRODUTO, VALOR, FRETE 
FROM PRODUTO
ORDER BY FRETE, PRODUTO; 

-- DELIMETER
-- PARA CRIAR UM PROCEDURE, PRECISAMOS ALTERAR O DELIMITER
STATUS
DELIMITER ?
-- AO REINICIA O DELIMITER RETORNA AO PADRÃO ';'


/* STORED PROCEDURES */
-- TEM ANONIMOS E NOMEADOS

CREATE PROCEDURE NOME_PROCESSO()
BEGIN
	PROGRAMAÇÃO;
END
?

-- EX: MOSTRAR O NOME DA EMPRESA QUANDO INICIAR O DB
CREATE PROCEDURE NOME_EMPRESA()
BEGIN
	SELECT 'EMPRESA FODA!' AS EMPRESA;
END
?

-- CHAMANDO A PROCEDURE
CALL NOME_EMPRESA()?

-- APAGANDO PROCEDURE
DROP PROCEDURE NOME_EMPRESA();

-- PROCEDURE COM PARAMETROS
CREATE PROCEDURE PRECO_TOTAL(VALOR FLOAT(10, 2), FRETE FLOAT(10, 2))
BEGIN
	SELECT VALOR + FRETE AS 'PREÇO FINAL';
END
?


/* EM UMA ARQUITETURA MVC, COMUMENTE AS REGRAS
DE NEGÓCIOS SÃO IMPLEMENTADAS PELO CONTROLLER,
PORÉM, É POSSÍVEL QUE AS REGRAS SEJAM IMPLEMEN-
TADAS DIRETAMENTE NOS BANCO DE DADOS
 	- ISSO AUMETA A DIFICULDADE EM UM CENÁRIO DE 
 	MIGRAÇÃO DE BANCO DE DADOS, POIS CADA UM PO
 	SSUI UMA SINTAXE DIFERENTE
	- PORÉM, TENDO AS REGRAS DE NEGÓCIOS PROCESSA
	DAS DENTRO DO BANCO DE DADOS, O SERVIDOR DE
	DADOS, SERÁ MAIS UTILIZADO, 'DESAFOGANDO' O 
	SERVIDOR DE CONTROLLER
	- COM A RN NO BANCO, É MAIS FÁCIL DE REALIZAR
	A MIGRAÇÃO DE TECNOLOGIA DO CONTROLLER, COMO
	C##, JAVA, PHP, RUBY, JS, ...
*/

delimiter ?
STATUS

-- PROCEDURE DE CADASTRO
CREATE PROCEDURE CAD_PRODUTO(P_NOME VARCHAR(30),
							  P_PRECO FLOAT(10,2),
							  P_FRETE FLOAT(10,2))
BEGIN
	INSERT INTO PRODUTO VALUES(NULL,
		   P_NOME, P_PRECO, P_FRETE);
END
?

DELIMITER ;
CALL CAD_PRODUTO('BOLA', 23.5, 3.60);

-- PROCEDURE DE CONSULTA
DELIMITER ?
CREATE PROCEDURE LE_PRODUTO(ID INT(11))
BEGIN
	SELECT NOME_PRODUTO, VALOR, FRETE FROM PRODUTO
	WHERE IDPRODUTO = ID;
END
?
DELIMITER ;

CALL LE_PRODUTO(3);

-- MAX, MIN, SUM, TRUNCATE E AVG
SELECT 	MAX(VALOR) AS 'MAIOR PRECO',
		MIN(VALOR) AS 'MENOR PRECO',
		TRUNCATE(AVG(VALOR),2) AS 'MÉDIA PRECO',
		SUM(FRETE) AS 'SOMA FRETE'
FROM PRODUTO;


CREATE TABLE VENDEDORES(
	IDVENDEDOR INT PRIMARY KEY AUTO_INCREMENT,
	NOME VARCHAR(30),
	SEXO CHAR(1),
	JANEIRO FLOAT(10,2),
	FEVEREIRO FLOAT(10,2),
	MARCO FLOAT(10,2)
);

INSERT INTO VENDEDORES VALUES(NULL,'CARLOS','M',76234.78,88346.87,5756.90);
INSERT INTO VENDEDORES VALUES(NULL,'MARIA','F',5865.78,6768.87,4467.90);
INSERT INTO VENDEDORES VALUES(NULL,'ANTONIO','M',78769.78,6685.87,6664.90);
INSERT INTO VENDEDORES VALUES(NULL,'CLARA','F',5779.78,446886.87,8965.90);
INSERT INTO VENDEDORES VALUES(NULL,'ANDERSON','M',676545.78,77544.87,578665.90);
INSERT INTO VENDEDORES VALUES(NULL,'IVONE','F',57789.78,44774.87,68665.90);
INSERT INTO VENDEDORES VALUES(NULL,'JOAO','M',4785.78,66478.87,6887.90);
INSERT INTO VENDEDORES VALUES(NULL,'CELIA','F',89667.78,57654.87,5755.90);

SELECT 	SEXO, 
		SUM(JANEIRO) AS 'SOMA JANEIRO',
		AVG(JANEIRO) AS 'MEDIA J'
FROM VENDEDORES GROUP BY SEXO;

-- VENDEDOR QUE MENOS VENDEU EM MARCO
SELECT 	IDVENDEDOR AS 'ID',
		NOME,
		MARCO
FROM VENDEDORES
WHERE MARCO = (SELECT MIN(MARCO) FROM VENDEDORES); 

-- VENDEDOR QUE VENDEU MAIS EM MARCO
SELECT 	IDVENDEDOR AS 'ID',
		NOME,
		MARCO
FROM VENDEDORES
WHERE MARCO = (SELECT MAX(MARCO) FROM VENDEDORES); 

-- QUEM VENDEU MAIS QUE A MÉDIA
SELECT 	IDVENDEDOR AS 'ID',
		NOME,
		MARCO
FROM VENDEDORES
WHERE MARCO > (SELECT AVG(MARCO) FROM VENDEDORES); 


-- SOMA DE VENDAS DE CADA VENDEDOR

SELECT 	NOME,
		JANEIRO,
		FEVEREIRO,
		MARCO,
		(JANEIRO+FEVEREIRO+MARCO) AS 'TOTAL',
		TRUNCATE((JANEIRO+FEVEREIRO+MARCO)/3,2) AS 'MÉDIA'
FROM VENDEDORES;

CREATE TABLE TABELA(
	C1 VARCHAR(30),
	C2 VARCHAR(30),
	C3 VARCHAR(30)
);

-- ADD PK, N DA PRA AUTO INCREMENT
ALTER TABLE TABELA
ADD PRIMARY KEY (C1);

-- ADD COLUNA, SEM POSIÇÃO, POR PADRÃO VIRA A ÚLTIMA
ALTER TABLE TABELA
ADD COLUNA VARCHAR(30);

 
-- IMPORTANTE:
-- AS CONTRAINTS, COMO FOREIGN KEY DEVEM SER ADICIONADAS
-- APÓS A CRIAÇÃO DAS TABELAS. EX:
CREATE TABLE TABELA1(
	ID1 INT,
	NOME VARCHAR(30) NOT NULL
);

CREATE TABLE TABELA2(
	ID2 INT,
	TIPO CHAR(3) NOT NULL,
	NUMERO VARCHAR(30) NOT NULL,
	ID_1 INT
);

-- FAZENDO ASSIM, COM O NOME DAS CONSTRAINTS
-- É POSSÍVEL TER MAIOR NOÇÃO DA ARQ. DO BANCO
ALTER TABLE TABELA1 ADD CONSTRAINT PK_1
PRIMARY KEY (ID1);

ALTER TABLE TABELA2 ADD CONSTRAINT FK_T1_T2
FOREIGN KEY(ID_1) REFERENCES TABELA1(ID1);

mysql> DESC TABELA1;
+-------+-------------+------+-----+---------+-------+
| Field | Type        | Null | Key | Default | Extra |
+-------+-------------+------+-----+---------+-------+
| ID1   | int(11)     | NO   | PRI | NULL    |       |
| NOME  | varchar(30) | NO   |     | NULL    |       |
+-------+-------------+------+-----+---------+-------+

mysql> DESC TABELA2;
+--------+-------------+------+-----+---------+-------+
| Field  | Type        | Null | Key | Default | Extra |
+--------+-------------+------+-----+---------+-------+
| ID2    | int(11)     | YES  |     | NULL    |       |
| TIPO   | char(3)     | NO   |     | NULL    |       |
| NUMERO | varchar(30) | NO   |     | NULL    |       |
| ID_1   | int(11)     | YES  | MUL | NULL    |       |
+--------+-------------+------+-----+---------+-------+

mysql> SHOW CREATE TABLE TABELA2
    -> ;
+---------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Table   | Create Table                                                                                                                                                                                                                                                                                |
+---------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| TABELA2 | CREATE TABLE `tabela2` (
  `ID2` int(11) DEFAULT NULL,
  `TIPO` char(3) NOT NULL,
  `NUMERO` varchar(30) NOT NULL,
  `ID_1` int(11) DEFAULT NULL,
  KEY `FK_T1_T2` (`ID_1`),
  CONSTRAINT `FK_T1_T2` FOREIGN KEY (`ID_1`) REFERENCES `tabela1` (`ID1`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 |
+---------+----------------------------------

/* DICIONARIO DE DADOS */
-- GUARDAM OS METADADOS

USE INFORMATION_SCHEMA;


/* EXERCICIO */

CREATE DATABASE OFICINA;

CREATE TABLE CLIENTE(
	IDCLIENTE INT AUTO_INCREMENT,
	NOME VARCHAR(30) NOT NULL,
	PRIMARY KEY (IDCLIENTE)
);

CREATE TABLE TELEFONE(
	IDTELEFONE INT AUTO_INCREMENT,
	NUMERO VARCHAR(15),
	ID_CLIENTE INT,
	PRIMARY KEY (IDTELEFONE)
);

CREATE TABLE CARRO(
	IDCARRO INT AUTO_INCREMENT,
	NOMECARRO VARCHAR(30) NOT NULL,
	ID_MARCA INT,
	ID_CLIENTE INT,
	PRIMARY KEY (IDCARRO) 
);

CREATE TABLE COR(
	IDCOR INT AUTO_INCREMENT,
	NOMECOR VARCHAR(30) NOT NULL UNIQUE,
	PRIMARY KEY (IDCOR)
);

CREATE TABLE CARRO_COR(
	ID_CARRO INT,
	ID_COR INT,
	PRIMARY KEY(ID_CARRO, ID_COR)
);

CREATE TABLE MARCA(
	IDMARCA INT AUTO_INCREMENT, 
	NOMEMARCA VARCHAR(30) NOT NULL UNIQUE,
	PRIMARY KEY (IDMARCA)
);


ALTER TABLE TELEFONE ADD CONSTRAINT FK_CLIENTE_TELEFONE
FOREIGN KEY(ID_CLIENTE) REFERENCES CLIENTE(IDCLIENTE);

ALTER TABLE CARRO ADD CONSTRAINT FK_CLIENTE_CARRO
FOREIGN KEY(ID_CLIENTE) REFERENCES CLIENTE(IDCLIENTE);

ALTER TABLE CARRO ADD CONSTRAINT FK_MARCA_CARRO
FOREIGN KEY(ID_MARCA) REFERENCES MARCA(IDMARCA);

ALTER TABLE CARRO_COR ADD CONSTRAINT FK_CARRO_CARROCOR
FOREIGN KEY(ID_CARRO) REFERENCES CARRO(IDCARRO);

ALTER TABLE CARRO_COR ADD CONSTRAINT FK_COR_CARROCOR
FOREIGN KEY(ID_COR) REFERENCES COR(IDCOR);


-- Inserindo clientes
INSERT INTO CLIENTE (NOME) VALUES ('João Silva');
INSERT INTO CLIENTE (NOME) VALUES ('Maria Oliveira');
INSERT INTO CLIENTE (NOME) VALUES ('Pedro Santos');
INSERT INTO CLIENTE (NOME) VALUES ('Ana Costa');
INSERT INTO CLIENTE (NOME) VALUES ('Carlos Pereira');
INSERT INTO CLIENTE (NOME) VALUES ('Fernanda Lima');

-- Inserindo telefones

INSERT INTO TELEFONE (NUMERO, ID_CLIENTE) VALUES ('123456789', 1); -- Para Maria Oliveira
INSERT INTO TELEFONE (NUMERO, ID_CLIENTE) VALUES ('987654321', 2); -- Para Pedro Santos
INSERT INTO TELEFONE (NUMERO, ID_CLIENTE) VALUES ('456123789', 2); -- Para Pedro Santos
INSERT INTO TELEFONE (NUMERO, ID_CLIENTE) VALUES ('321654987', 4); -- Para Carlos Pereira
INSERT INTO TELEFONE (NUMERO, ID_CLIENTE) VALUES ('789456123', 5); -- Para Fernanda Lima
INSERT INTO TELEFONE (NUMERO, ID_CLIENTE) VALUES ('654789321', 5); -- Para Fernanda Lima

-- Inserindo marcas
INSERT INTO MARCA (NOMEMARCA) VALUES ('Fiat');
INSERT INTO MARCA (NOMEMARCA) VALUES ('Volkswagen');
INSERT INTO MARCA (NOMEMARCA) VALUES ('Toyota');

-- Inserindo carros
INSERT INTO CARRO (NOMECARRO, ID_MARCA, ID_CLIENTE) VALUES ('Palio', 1, 1); -- Fiat
INSERT INTO CARRO (NOMECARRO, ID_MARCA, ID_CLIENTE) VALUES ('Gol', 2, 2); -- Volkswagen
INSERT INTO CARRO (NOMECARRO, ID_MARCA, ID_CLIENTE) VALUES ('Corolla', 3, 3); -- Toyota
INSERT INTO CARRO (NOMECARRO, ID_MARCA, ID_CLIENTE) VALUES ('Civic', 1, 4); -- Fiat
INSERT INTO CARRO (NOMECARRO, ID_MARCA, ID_CLIENTE) VALUES ('Fox', 2, 5); -- Volkswagen
INSERT INTO CARRO (NOMECARRO, ID_MARCA, ID_CLIENTE) VALUES ('Hilux', 3, 6); -- Toyota

-- Inserindo cores
INSERT INTO COR (NOMECOR) VALUES ('Preto');
INSERT INTO COR (NOMECOR) VALUES ('Branco');
INSERT INTO COR (NOMECOR) VALUES ('Vermelho');

-- Inserindo carro_cor
INSERT INTO CARRO_COR (ID_CARRO, ID_COR) VALUES (1, 1); -- Para Palio
INSERT INTO CARRO_COR (ID_CARRO, ID_COR) VALUES (2, 3); -- Para Gol
INSERT INTO CARRO_COR (ID_CARRO, ID_COR) VALUES (3, 2); -- Para Corolla
INSERT INTO CARRO_COR (ID_CARRO, ID_COR) VALUES (4, 2); -- Para Civic
INSERT INTO CARRO_COR (ID_CARRO, ID_COR) VALUES (5, 1); -- Para Fox
INSERT INTO CARRO_COR (ID_CARRO, ID_COR) VALUES (5, 2); -- Para Fox
INSERT INTO CARRO_COR (ID_CARRO, ID_COR) VALUES (6, 3); -- Para Hilux

-- CONSTRUINDO UMA VIEW QUE REUNA AS TABELAS
SELECT 	C.NOME,
		T.NUMERO,
		CA.NOMECARRO AS CARRO, 
		CO.NOMECOR AS COR, 
		M.NOMEMARCA AS MARCA
FROM CLIENTE C
INNER JOIN TELEFONE T ON C.IDCLIENTE = T.ID_CLIENTE
INNER JOIN CARRO CA ON C.IDCLIENTE = CA.ID_CLIENTE
INNER JOIN CARRO_COR CC ON CA.IDCARRO = CC.ID_CARRO
INNER JOIN COR CO ON CC.ID_COR = CO.IDCOR
INNER JOIN MARCA M ON CA.ID_MARCA = M.IDMARCA;

SELECT 	C.NOME, 
		T.NUMERO, 
		CA.NOMECARRO AS CARRO, 
		CO.NOMECOR AS COR, 
		M.NOMEMARCA AS MARCA
FROM CLIENTE C
LEFT JOIN TELEFONE T ON C.IDCLIENTE = T.ID_CLIENTE
INNER JOIN CARRO CA ON C.IDCLIENTE = CA.ID_CLIENTE
INNER JOIN CARRO_COR CC ON CA.IDCARRO = CC.ID_CARRO
INNER JOIN COR CO ON CC.ID_COR = CO.IDCOR
INNER JOIN MARCA M ON CA.ID_MARCA = M.IDMARCA;

/* ESTRUTURA DE UM TRIGGER */
DELIMITER ?
CREATE TRIGGER NOME
BEFORE/AFTER INSERT/DELETE/UPDATE ON TABELA
FOR EACH ROW
BEGIN


END
?

CREATE DATABASE EXTRIGGER;
USE EXTRIGGER;

CREATE TABLE USUARIO(
	IDUSUARIO INT PRIMARY KEY AUTO_INCREMENT,
	NOME VARCHAR(30),
	LOGIN VARCHAR(30),
	SENHA VARCHAR(100)
);

CREATE TABLE BKP_USUARIO(
	IDBACKUP INT PRIMARY KEY AUTO_INCREMENT,	
	IDUSUARIO INT, 
	NOME VARCHAR(30),
	LOGIN VARCHAR(30)
);

-- TRIGGER PARA BACKUP
DELIMITER ?
CREATE TRIGGER BACKUP_USER
BEFORE DELETE ON USUARIO
FOR EACH ROW
BEGIN
	 INSERT INTO BKP_USUARIO VALUES(
	 		NULL, 
	 		OLD.IDUSUARIO, 
	 		OLD.NOME, 
	 		OLD.LOGIN);
END
?
DELIMITER ;

INSERT INTO USUARIO VALUES(NULL, 'EUSTÁCIO', '23424', 'SDFSDFSDF');
DELETE FROM USUARIO WHERE IDUSUARIO = 1;

-- FAZENDO BACKUP EM OUTRO BANCO DE DADOS
CREATE DATABASE LOJA;
USE LOJA;
CREATE TABLE PRODUTO(
	IDPRODUTO INT PRIMARY KEY AUTO_INCREMENT,
	NOME VARCHAR(30) NOT NULL,
	VALOR FLOAT(10,2)
);

CREATE DATABASE BACKUP_LOJA;
USE BACKUP_LOJA;
CREATE TABLE BKP_PRODUTO(
	IDBKP INT PRIMARY KEY AUTO_INCREMENT,
	IDPRODUTO INT,
	NOME VARCHAR(30),
	VALOR FLOAT(10,2)
);

USE LOJA;

-- INSERINDO EM OUTRA TABELA
INSERT INTO BACKUP_LOJA.BKP_PRODUTO VALUES(NULL, 123, 'TESTE', 234.2);


DELIMITER ?
CREATE TRIGGER BKP_PROD
BEFORE INSERT ON PRODUTO
FOR EACH ROW 
BEGIN
	INSERT INTO BACKUP_LOJA.BKP_PRODUTO VALUES(
		NULL, 
		NEW.IDPRODUTO, 
		NEW.NOME, 
		NEW.VALOR);
END
?
DELIMITER;

INSERT INTO PRODUTO (NOME, VALOR) VALUES('ASDD', 234.3);
DROP TRIGGER BKP_PROD; -- POIS O ID AINDA N TINHA SIDO CRIADO

-- CORRIGINDO
DELIMITER ?
CREATE TRIGGER BKP_PROD
AFTER INSERT ON PRODUTO
FOR EACH ROW 
BEGIN
	INSERT INTO BACKUP_LOJA.BKP_PRODUTO VALUES(
		NULL, 
		NEW.IDPRODUTO, 
		NEW.NOME, 
		NEW.VALOR);
END
?
DELIMITER ;
INSERT INTO PRODUTO (NOME, VALOR) VALUES('TESTE2', 45.3);
SELECT * FROM BACKUP_LOJA.BKP_PRODUTO;

+-------+-----------+--------+--------+
| IDBKP | IDPRODUTO | NOME   | VALOR  |
+-------+-----------+--------+--------+
|     1 |       123 | TESTE  | 234.20 |
|     2 |         0 | ASDD   | 234.30 | -- IDPRODUTO 0 - PROBLEMA
|     3 |         2 | TESTE2 |  45.30 |
+-------+-----------+--------+--------+

-- ADICIONANDO TRIGGER PARA DELETE, JUNTAMENTE COM FLAG
ALTER TABLE BACKUP_LOJA.BKP_PRODUTO
ADD EVENTO CHAR(1);

DELIMITER ?
CREATE TRIGGER BACKUP_PRODUTO_DEL
BEFORE DELETE ON PRODUTO
FOR EACH ROW
BEGIN
	INSERT INTO BACKUP_LOJA.BKP_PRODUTO VALUES(
		NULL,
		OLD.IDPRODUTO, 
		OLD.NOME,
		OLD.VALOR,
		'D');
END
?
DELIMITER ;

INSERT INTO PRODUTO VALUES(NULL,'TEST', 25.3);
SELECT * FROM BACKUP_LOJA.BKP_PRODUTO;


-- ARRUMANDO TRIGGER DE INSERT
DROP TRIGGER BKP_PROD;
DELIMITER ?
CREATE TRIGGER BKP_PROD
AFTER INSERT ON PRODUTO
FOR EACH ROW 
BEGIN
	INSERT INTO BACKUP_LOJA.BKP_PRODUTO VALUES(
		NULL, 
		NEW.IDPRODUTO, 
		NEW.NOME, 
		NEW.VALOR,
		'I');
END
?
DELIMITER ;
INSERT INTO PRODUTO (NOME, VALOR) VALUES('TESTE2', 45.3);
INSERT INTO PRODUTO (NOME, VALOR) VALUES('TESTE3', 4.3);
INSERT INTO PRODUTO (NOME, VALOR) VALUES('TESTE4', 5.3);

DELETE FROM BACKUP_LOJA.BKP_PRODUTO
WHERE IDBKP = 1 OR IDBKP = 2 OR IDBKP = 3;

DELETE FROM PRODUTO; -- EXCLUI TODOS OS PRODUTOS

SELECT * FROM BACKUP_LOJA.BKP_PRODUTO;
+-------+-----------+--------+-------+--------+
|     4 |        10 | TESTE2 | 45.30 | I      |
|     5 |        11 | TESTE3 |  4.30 | I      |
|     6 |        12 | TESTE4 |  5.30 | I      |
|     7 |        10 | TESTE2 | 45.30 | D      |
|     8 |        11 | TESTE3 |  4.30 | D      |
|     9 |        12 | TESTE4 |  5.30 | D      |
+-------+-----------+--------+-------+--------+

-- TRIGGER DE AUDITORIA
ALTER TABLE BACKUP_LOJA.BKP_PRODUTO
ADD VALOR_ORIGINAL FLOAT(10, 2);

ALTER TABLE BACKUP_LOJA.BKP_PRODUTO
ADD VALOR_ALTERADO FLOAT(10, 2);

ALTER TABLE BACKUP_LOJA.BKP_PRODUTO
ADD USER VARCHAR(30);

ALTER TABLE BACKUP_LOJA.BKP_PRODUTO
ADD COLUMN DATA DATETIME;

ALTER TABLE BACKUP_LOJA.BKP_PRODUTO
DROP COLUMN VALOR;

DROP TRIGGER BKP_PROD;
DELIMITER ?
CREATE TRIGGER BKP_PROD_INSERT
AFTER INSERT ON PRODUTO
FOR EACH ROW 
BEGIN
	INSERT INTO BACKUP_LOJA.BKP_PRODUTO VALUES(
		NULL, 
		NEW.IDPRODUTO, 
		NEW.NOME, 
		'I',
		NEW.VALOR,
		NULL,
		NOW(),
		CURRENT_USER);
END
?
DELIMITER ;

DROP TRIGGER BACKUP_PRODUTO_DEL;
DELIMITER ?
CREATE TRIGGER BACKUP_PRODUTO_DEL
BEFORE DELETE ON PRODUTO
FOR EACH ROW
BEGIN
	INSERT INTO BACKUP_LOJA.BKP_PRODUTO VALUES(
		NULL, 
		OLD.IDPRODUTO, 
		OLD.NOME, 
		'D',
		OLD.VALOR,
		NULL,
		NOW(),
		CURRENT_USER);
END
?
DELIMITER ;

DELIMITER ?
CREATE TRIGGER BACKUP_PRODUTO_UP
AFTER UPDATE ON PRODUTO
FOR EACH ROW
BEGIN
	INSERT INTO BACKUP_LOJA.BKP_PRODUTO VALUES(
		NULL, 
		OLD.IDPRODUTO, 
		OLD.NOME, 
		'U',
		OLD.VALOR,
		NEW.VALOR,
		NOW(),
		CURRENT_USER);
END
?
DELIMITER ;

INSERT INTO PRODUTO (NOME, VALOR) VALUES('TESTE2', 45.3);
INSERT INTO PRODUTO (NOME, VALOR) VALUES('TESTE3', 4.3);
INSERT INTO PRODUTO (NOME, VALOR) VALUES('TESTE4', 5.3);
UPDATE PRODUTO SET VALOR = 234.3 WHERE NOME = 'TESTE2';
UPDATE PRODUTO SET VALOR = 98.3 WHERE NOME = 'TESTE4';
UPDATE PRODUTO SET VALOR = 10.9 WHERE NOME = 'TESTE4';
DELETE FROM PRODUTO WHERE NOME = 'TESTE3';

SELECT * FROM BACKUP_LOJA.BKP_PRODUTO;
+-------+-----------+--------+--------+----------------+----------------+---------------------+----------------+
| IDBKP | IDPRODUTO | NOME   | EVENTO | VALOR_ORIGINAL | VALOR_ALTERADO | DATA                | USER           |
+-------+-----------+--------+--------+----------------+----------------+---------------------+----------------+
|    31 |        19 | TESTE2 | I      |          45.30 |           NULL | 2024-08-02 19:57:59 | root@localhost |
|    32 |        20 | TESTE3 | I      |           4.30 |           NULL | 2024-08-02 19:57:59 | root@localhost |
|    33 |        21 | TESTE4 | I      |           5.30 |           NULL | 2024-08-02 19:57:59 | root@localhost |
|    34 |        19 | TESTE2 | U      |          45.30 |         234.30 | 2024-08-02 19:57:59 | root@localhost |
|    35 |        21 | TESTE4 | U      |           5.30 |          98.30 | 2024-08-02 19:57:59 | root@localhost |
|    36 |        21 | TESTE4 | U      |          98.30 |          10.90 | 2024-08-02 19:57:59 | root@localhost |
|    37 |        20 | TESTE3 | D      |           4.30 |           NULL | 2024-08-02 19:58:32 | root@localhost |
+-------+-----------+--------+--------+----------------+----------------+---------------------+----------------+

/* AUTORELACIONAMENTO  */
CREATE TABLE CURSOS(
	IDCURSO INT PRIMARY KEY AUTO_INCREMENT,
	NOME VARCHAR(30),
	HORAS INT,
	VALOR FLOAT(10,2),
	ID_PREREQ INT
);

ALTER TABLE CURSOS ADD CONSTRAINT FK_PREREQ
FOREIGN KEY (ID_PREREQ) REFERENCES CURSOS(IDCURSO);

INSERT INTO CURSOS VALUES(NULL,'BD RELACIONAL',20,400.00,NULL);
INSERT INTO CURSOS VALUES(NULL,'BUSINESS INTELLIGENCE',40,800.00,1);
INSERT INTO CURSOS VALUES(NULL,'RELATORIOS AVANCADOS',20,600.00,2);
INSERT INTO CURSOS VALUES(NULL,'LOGICA PROGRAM',20,400.00,NULL);
INSERT INTO CURSOS VALUES(NULL,'RUBY',30,500.00,4);


SELECT
    C1.NOME AS CURSO,
    C1.VALOR AS VALOR,
    C1.HORAS AS HORAS,
    CASE
        WHEN C1.ID_PREREQ IS NULL THEN '-----'
        ELSE C2.NOME
    END AS PREREQUISITO
FROM CURSOS C1
LEFT JOIN CURSOS C2 
ON C1.ID_PREREQ = C2.IDCURSO;

-- OU
SELECT 
	C.NOME AS CURSO, 
	C.VALOR AS VALOR, 
	C.HORAS AS CARGA, 
	IFNULL(P.NOME, "-----") AS PREREQ
FROM CURSOS C 
LEFT JOIN CURSOS P
ON P.IDCURSO = C.ID_PREREQ;


/* 	CURSORES
	USAM MEMÓRIA RAM
	SÃO USADOS PARA REALIZAR OPERAÇÕES MAIS
	COMPLEXAS EM UMA BASE DE DADOS
*/

CREATE DATABASE CURSORES;
USE CURSORES;

CREATE TABLE VENDEDORES(
	IDVENDEDOR INT PRIMARY KEY AUTO_INCREMENT,
	NOME VARCHAR(50),
	JAN INT,
	FEV INT, 
	MAR INT
);

INSERT INTO VENDEDORES VALUES(NULL,'MAFRA',32432,242334,574545);
INSERT INTO VENDEDORES VALUES(NULL,'CLARA',65465,65443,653454);
INSERT INTO VENDEDORES VALUES(NULL,'JOAO',12432,65356,8756);
INSERT INTO VENDEDORES VALUES(NULL,'LILIAN',4567,9676,8765);
INSERT INTO VENDEDORES VALUES(NULL,'ANTONIO',3467,68756,99765);
INSERT INTO VENDEDORES VALUES(NULL,'GLORIA',54786,76889,7098);


SELECT NOME, (JAN+FEV+MAR) AS TOTAL FROM VENDEDORES;
SELECT NOME, (JAN+FEV+MAR) AS TOTAL, TRUNCATE((JAN+FEV+MAR)/3,2) AS MÉDIA FROM VENDEDORES;


CREATE TABLE VEND_TOTAL(
	NOME VARCHAR(50),
	JAN INT,
	FEV INT, 
	MAR INT,
	TOTAL INT,
	MEDIA FLOAT(10,2)
);

DELIMITER ?
CREATE PROCEDURE INSEREDADOS()
BEGIN
	DECLARE FIM INT DEFAULT 0;
	DECLARE VAR1, VAR2, VAR3 INT;
	DECLARE VMEDIA FLOAT(10,2);
	DECLARE VTOTAL INT;
	DECLARE VNOME VARCHAR(50);

	DELETE FROM VEND_TOTAL;

	DECLARE REG CURSOR FOR(
		SELECT NOME, JAN, FEV, MAR FROM VENDEDORES
		--[(NOME, JAN, FEV, MAR), (NOME, JAN, FEV, MAR),...]
	);

	DECLARE CONTINUE HANDLER FOR NOT FOUND SET FIM = 1;
	-- VARIAVEL DE MANIPULAÇÃO CONTINUA, QUE CONTROLA 
	-- O CURSOR E VERIFICA SE ACABOU. ENQUANTO FIM = 0
	-- CONTINUE O LOOP.

	OPEN REG; 
	-- COLOCA O RESULTADO DE REG EM MEMORIA RAM

	REPEAT 
		FETCH REG INTO VNOME, VAR1, VAR2, VAR3;
		-- PEGA O REGISTRO
		IF NOT FIM THEN
			SET VTOTAL = VAR1 + VAR2 + VAR3;
			SET VMEDIA = TRUNCATE(VTOTAL/3,2);
			INSERT INTO VEND_TOTAL VALUES(
				VNOME, VAR1, VAR2, VAR3, VTOTAL, VMEDIA);
		END IF;
	UNTIL FIM END REPEAT;
	CLOSE REG;
END
?
DELIMITER ;

-- SEM COMENTARIOS
DELIMITER ?
CREATE PROCEDURE INSEREDADOS()
BEGIN
	DECLARE FIM INT DEFAULT 0;
	DECLARE VAR1, VAR2, VAR3 INT;
	DECLARE VMEDIA FLOAT(10,2);
	DECLARE VTOTAL INT;
	DECLARE VNOME VARCHAR(50);


	DECLARE REG CURSOR FOR(
		SELECT NOME, JAN, FEV, MAR FROM VENDEDORES
	);

	DECLARE CONTINUE HANDLER FOR NOT FOUND SET FIM = 1;
	OPEN REG; 
	DELETE FROM VEND_TOTAL;

	REPEAT 
		FETCH REG INTO VNOME, VAR1, VAR2, VAR3;
		IF NOT FIM THEN
			SET VTOTAL = VAR1 + VAR2 + VAR3;
			SET VMEDIA = TRUNCATE(VTOTAL/3,2);
			INSERT INTO VEND_TOTAL VALUES(
				VNOME, VAR1, VAR2, VAR3, VTOTAL, VMEDIA);
		END IF;
	UNTIL FIM END REPEAT;
	CLOSE REG;
END
?
DELIMITER ;

CALL INSEREDADOS();

/* A47 SEGUNDA E TERCEIRAS FORMAS NORMAIS */

/*
	 PRIMEIRA FN
	 
	 ATOMICIDADE - UM CAMPO NAO PODE SER DIVISIVEL
	 UM CAMPO NAO PODE SER VETORIZADO
	 PK CHAVE PRIMARIA

*/

CREATE DATABASE CONSULTORIO;
USE CONSULTORIO;

CREATE TABLE PACIENTE(
	IDPACIENTE INT PRIMARY KEY AUTO_INCREMENT,
	NOME VARCHAR(30),
	SEXO CHAR(1),
	EMAIL VARCHAR(30),
	NASCIMENTO DATE
);

CREATE TABLE MEDICO(
	IDMEDICO INT PRIMARY KEY IDENTITY,
	NOME VARCHAR(30),
	SEXO CAHR(1),
	ESPECIALIDADE VARCHAR(30),
	FUNCIONARIO ENUM('S','N')
);

CREATE TABLE HOSPITAL(
	IDHOSPITAL INT PRIMARY KEY AUTO_INCREMENT,
	NOME VARCHAR(30),
	BAIRRO VARCHAR(30),
	CIDADE VARCHAR(30),
	ESTADO CHAR(2)
);

CREATE TABLE CONSULTA(
	IDCONSULTA INT PRIMARY KEY AUTO_INCREMENT,
	ID_PACIENTE INT,
	ID_MEDICO INT,
	ID_HOSPITAL INT,
	DATA DATETIME,
	DIAGNOSTICO VARCHAR(50)
);

CREATE TABLE INTERNACAO(
	IDINTERNACAO INT PRIMARY KEY AUTO_INCREMENT,
	ENTRADA DATETIME,
	QUARTO INT,
	SAIDA DATETIME,
	OBSERVACOES VARCHAR(50),
	ID_CONSULTA INT UNIQUE	
);  


ALTER TABLE CONSULTA ADD CONSTRAINT FK_CONSULTA_PACIENTE
FOREIGN KEY(ID_PACIENTE) REFERENCES PACIENTE(IDPACIENTE);

ALTER TABLE CONSULTA ADD CONSTRAINT FK_CONSULTA_MEDICO
FOREIGN KEY(ID_MEDICO) REFERENCES MEDICO(IDMEDICO);

ALTER TABLE CONSULTA ADD CONSTRAINT FK_CONSULTA_HOSPITAL
FOREIGN KEY(ID_HOSPITAL) REFERENCES HOSPITAL(IDHOSPITAL);

ALTER TABLE INTERNACAO ADD CONSTRAINT FK_INTERNACAO_CONSULTA
FOREIGN KEY(ID_CONSULTA) REFERENCES CONSULTA(IDCONSULTA);

USE INFORMATION_SCHEMA

SELECT * FROM TABLE_CONSTRAINTS 
WHERE TABLE_SCHEMA = 'CONSULTORIO';
 











